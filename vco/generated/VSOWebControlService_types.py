##################################################
# file: VSOWebControlService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /home/yann/.virtualenvs/vco-gae/bin/wsdl2py ../wsdl/vmo.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://webservice.vso.dunes.ch
##############################

class ns0:
    targetNamespace = "http://webservice.vso.dunes.ch"

    class Property_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.vso.dunes.ch"
        type = (schema, "Property")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Property_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "Property_Holder"
            self.pyclass = Holder

    class ArrayOfProperty_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.vso.dunes.ch"
        type = (schema, "ArrayOfProperty")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfProperty_Def.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","Property",lazy=False)(pname=(ns,"item"), aname="_item", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item = []
                    return
            Holder.__name__ = "ArrayOfProperty_Holder"
            self.pyclass = Holder

    class FinderResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.vso.dunes.ch"
        type = (schema, "FinderResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FinderResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.vso.dunes.ch","ArrayOfProperty",lazy=False)(pname=(ns,"properties"), aname="_properties", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dunesUri"), aname="_dunesUri", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._id = None
                    self._properties = None
                    self._dunesUri = None
                    return
            Holder.__name__ = "FinderResult_Holder"
            self.pyclass = Holder

    class ArrayOfFinderResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.vso.dunes.ch"
        type = (schema, "ArrayOfFinderResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfFinderResult_Def.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","FinderResult",lazy=False)(pname=(ns,"item"), aname="_item", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item = []
                    return
            Holder.__name__ = "ArrayOfFinderResult_Holder"
            self.pyclass = Holder

    class QueryResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.vso.dunes.ch"
        type = (schema, "QueryResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.QueryResult_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"totalCount"), aname="_totalCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.vso.dunes.ch","ArrayOfFinderResult",lazy=False)(pname=(ns,"elements"), aname="_elements", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._totalCount = None
                    self._elements = None
                    return
            Holder.__name__ = "QueryResult_Holder"
            self.pyclass = Holder

    class WorkflowParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.vso.dunes.ch"
        type = (schema, "WorkflowParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WorkflowParameter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    return
            Holder.__name__ = "WorkflowParameter_Holder"
            self.pyclass = Holder

    class ArrayOfWorkflowParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.vso.dunes.ch"
        type = (schema, "ArrayOfWorkflowParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfWorkflowParameter_Def.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","WorkflowParameter",lazy=False)(pname=(ns,"item"), aname="_item", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item = []
                    return
            Holder.__name__ = "ArrayOfWorkflowParameter_Holder"
            self.pyclass = Holder

    class Workflow_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.vso.dunes.ch"
        type = (schema, "Workflow")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Workflow_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.vso.dunes.ch","ArrayOfWorkflowParameter",lazy=False)(pname=(ns,"inParameters"), aname="_inParameters", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.vso.dunes.ch","ArrayOfWorkflowParameter",lazy=False)(pname=(ns,"outParameters"), aname="_outParameters", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.vso.dunes.ch","ArrayOfWorkflowParameter",lazy=False)(pname=(ns,"attributes"), aname="_attributes", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._name = None
                    self._description = None
                    self._inParameters = None
                    self._outParameters = None
                    self._attributes = None
                    return
            Holder.__name__ = "Workflow_Holder"
            self.pyclass = Holder

    class WorkflowTokenAttribute_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.vso.dunes.ch"
        type = (schema, "WorkflowTokenAttribute")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WorkflowTokenAttribute_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    self._value = None
                    return
            Holder.__name__ = "WorkflowTokenAttribute_Holder"
            self.pyclass = Holder

    class WorkflowToken_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.vso.dunes.ch"
        type = (schema, "WorkflowToken")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WorkflowToken_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"workflowId"), aname="_workflowId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"currentItemName"), aname="_currentItemName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"currentItemState"), aname="_currentItemState", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"globalState"), aname="_globalState", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startDate"), aname="_startDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDate"), aname="_endDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"xmlContent"), aname="_xmlContent", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._title = None
                    self._workflowId = None
                    self._currentItemName = None
                    self._currentItemState = None
                    self._globalState = None
                    self._startDate = None
                    self._endDate = None
                    self._xmlContent = None
                    return
            Holder.__name__ = "WorkflowToken_Holder"
            self.pyclass = Holder

    class ModuleInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservice.vso.dunes.ch"
        type = (schema, "ModuleInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ModuleInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"moduleName"), aname="_moduleName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"moduleVersion"), aname="_moduleVersion", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"moduleDescription"), aname="_moduleDescription", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"moduleDisplayName"), aname="_moduleDisplayName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._moduleName = None
                    self._moduleVersion = None
                    self._moduleDescription = None
                    self._moduleDisplayName = None
                    return
            Holder.__name__ = "ModuleInfo_Holder"
            self.pyclass = Holder

    class find_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "find"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.find_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"query"), aname="_query", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'find')
            kw["aname"] = "_find"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._query = None
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "find_Holder"
            self.pyclass = Holder

    class findResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.findResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","QueryResult",lazy=False)(pname=(ns,"findReturn"), aname="_findReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'findResponse')
            kw["aname"] = "_findResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._findReturn = None
                    return
            Holder.__name__ = "findResponse_Holder"
            self.pyclass = Holder

    class echo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "echo"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.echo_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'echo')
            kw["aname"] = "_echo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "echo_Holder"
            self.pyclass = Holder

    class echoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "echoResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.echoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"echoReturn"), aname="_echoReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'echoResponse')
            kw["aname"] = "_echoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._echoReturn = None
                    return
            Holder.__name__ = "echoResponse_Holder"
            self.pyclass = Holder

    class echoWorkflow_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "echoWorkflow"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.echoWorkflow_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","Workflow",lazy=False)(pname=(ns,"workflowMessage"), aname="_workflowMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'echoWorkflow')
            kw["aname"] = "_echoWorkflow"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._workflowMessage = None
                    return
            Holder.__name__ = "echoWorkflow_Holder"
            self.pyclass = Holder

    class echoWorkflowResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "echoWorkflowResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.echoWorkflowResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","Workflow",lazy=False)(pname=(ns,"echoWorkflowReturn"), aname="_echoWorkflowReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'echoWorkflowResponse')
            kw["aname"] = "_echoWorkflowResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._echoWorkflowReturn = None
                    return
            Holder.__name__ = "echoWorkflowResponse_Holder"
            self.pyclass = Holder

    class sendCustomEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendCustomEvent"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.sendCustomEvent_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"eventName"), aname="_eventName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"serializedProperties"), aname="_serializedProperties", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'sendCustomEvent')
            kw["aname"] = "_sendCustomEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._eventName = None
                    self._serializedProperties = None
                    return
            Holder.__name__ = "sendCustomEvent_Holder"
            self.pyclass = Holder

    class sendCustomEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendCustomEventResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.sendCustomEventResponse_Dec.schema
            TClist = []
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'sendCustomEventResponse')
            kw["aname"] = "_sendCustomEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "sendCustomEventResponse_Holder"
            self.pyclass = Holder

    class getWorkflowForId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkflowForId"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getWorkflowForId_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"workflowId"), aname="_workflowId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getWorkflowForId')
            kw["aname"] = "_getWorkflowForId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._workflowId = None
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "getWorkflowForId_Holder"
            self.pyclass = Holder

    class getWorkflowForIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkflowForIdResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getWorkflowForIdResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","Workflow",lazy=False)(pname=(ns,"getWorkflowForIdReturn"), aname="_getWorkflowForIdReturn", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getWorkflowForIdResponse')
            kw["aname"] = "_getWorkflowForIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getWorkflowForIdReturn = None
                    return
            Holder.__name__ = "getWorkflowForIdResponse_Holder"
            self.pyclass = Holder

    class getAllWorkflows_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllWorkflows"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getAllWorkflows_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getAllWorkflows')
            kw["aname"] = "_getAllWorkflows"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "getAllWorkflows_Holder"
            self.pyclass = Holder

    class getAllWorkflowsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllWorkflowsResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getAllWorkflowsResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","Workflow",lazy=False)(pname=(ns,"getAllWorkflowsReturn"), aname="_getAllWorkflowsReturn", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getAllWorkflowsResponse')
            kw["aname"] = "_getAllWorkflowsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getAllWorkflowsReturn = []
                    return
            Holder.__name__ = "getAllWorkflowsResponse_Holder"
            self.pyclass = Holder

    class getWorkflowsWithName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkflowsWithName"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getWorkflowsWithName_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"workflowName"), aname="_workflowName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getWorkflowsWithName')
            kw["aname"] = "_getWorkflowsWithName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._workflowName = None
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "getWorkflowsWithName_Holder"
            self.pyclass = Holder

    class getWorkflowsWithNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkflowsWithNameResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getWorkflowsWithNameResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","Workflow",lazy=False)(pname=(ns,"getWorkflowsWithNameReturn"), aname="_getWorkflowsWithNameReturn", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getWorkflowsWithNameResponse')
            kw["aname"] = "_getWorkflowsWithNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getWorkflowsWithNameReturn = []
                    return
            Holder.__name__ = "getWorkflowsWithNameResponse_Holder"
            self.pyclass = Holder

    class executeWorkflow_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "executeWorkflow"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.executeWorkflow_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"workflowId"), aname="_workflowId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.vso.dunes.ch","WorkflowTokenAttribute",lazy=False)(pname=(ns,"workflowInputs"), aname="_workflowInputs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'executeWorkflow')
            kw["aname"] = "_executeWorkflow"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._workflowId = None
                    self._username = None
                    self._password = None
                    self._workflowInputs = []
                    return
            Holder.__name__ = "executeWorkflow_Holder"
            self.pyclass = Holder

    class executeWorkflowResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "executeWorkflowResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.executeWorkflowResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","WorkflowToken",lazy=False)(pname=(ns,"executeWorkflowReturn"), aname="_executeWorkflowReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'executeWorkflowResponse')
            kw["aname"] = "_executeWorkflowResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._executeWorkflowReturn = None
                    return
            Holder.__name__ = "executeWorkflowResponse_Holder"
            self.pyclass = Holder

    class simpleExecuteWorkflow_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "simpleExecuteWorkflow"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.simpleExecuteWorkflow_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"in0"), aname="_in0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"in1"), aname="_in1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"in2"), aname="_in2", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"in3"), aname="_in3", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'simpleExecuteWorkflow')
            kw["aname"] = "_simpleExecuteWorkflow"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._in0 = None
                    self._in1 = None
                    self._in2 = None
                    self._in3 = None
                    return
            Holder.__name__ = "simpleExecuteWorkflow_Holder"
            self.pyclass = Holder

    class simpleExecuteWorkflowResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "simpleExecuteWorkflowResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.simpleExecuteWorkflowResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","WorkflowToken",lazy=False)(pname=(ns,"simpleExecuteWorkflowReturn"), aname="_simpleExecuteWorkflowReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'simpleExecuteWorkflowResponse')
            kw["aname"] = "_simpleExecuteWorkflowResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simpleExecuteWorkflowReturn = None
                    return
            Holder.__name__ = "simpleExecuteWorkflowResponse_Holder"
            self.pyclass = Holder

    class cancelWorkflow_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "cancelWorkflow"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.cancelWorkflow_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"workflowTokenId"), aname="_workflowTokenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'cancelWorkflow')
            kw["aname"] = "_cancelWorkflow"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._workflowTokenId = None
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "cancelWorkflow_Holder"
            self.pyclass = Holder

    class cancelWorkflowResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "cancelWorkflowResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.cancelWorkflowResponse_Dec.schema
            TClist = []
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'cancelWorkflowResponse')
            kw["aname"] = "_cancelWorkflowResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "cancelWorkflowResponse_Holder"
            self.pyclass = Holder

    class getWorkflowTokenResult_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkflowTokenResult"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getWorkflowTokenResult_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"workflowTokenId"), aname="_workflowTokenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getWorkflowTokenResult')
            kw["aname"] = "_getWorkflowTokenResult"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._workflowTokenId = None
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "getWorkflowTokenResult_Holder"
            self.pyclass = Holder

    class getWorkflowTokenResultResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkflowTokenResultResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getWorkflowTokenResultResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","WorkflowTokenAttribute",lazy=False)(pname=(ns,"getWorkflowTokenResultReturn"), aname="_getWorkflowTokenResultReturn", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getWorkflowTokenResultResponse')
            kw["aname"] = "_getWorkflowTokenResultResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getWorkflowTokenResultReturn = []
                    return
            Holder.__name__ = "getWorkflowTokenResultResponse_Holder"
            self.pyclass = Holder

    class getWorkflowTokenForId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkflowTokenForId"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getWorkflowTokenForId_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"workflowTokenId"), aname="_workflowTokenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getWorkflowTokenForId')
            kw["aname"] = "_getWorkflowTokenForId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._workflowTokenId = None
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "getWorkflowTokenForId_Holder"
            self.pyclass = Holder

    class getWorkflowTokenForIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkflowTokenForIdResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getWorkflowTokenForIdResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","WorkflowToken",lazy=False)(pname=(ns,"getWorkflowTokenForIdReturn"), aname="_getWorkflowTokenForIdReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getWorkflowTokenForIdResponse')
            kw["aname"] = "_getWorkflowTokenForIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getWorkflowTokenForIdReturn = None
                    return
            Holder.__name__ = "getWorkflowTokenForIdResponse_Holder"
            self.pyclass = Holder

    class getWorkflowTokenStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkflowTokenStatus"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getWorkflowTokenStatus_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"workflowTokenIds"), aname="_workflowTokenIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getWorkflowTokenStatus')
            kw["aname"] = "_getWorkflowTokenStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._workflowTokenIds = []
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "getWorkflowTokenStatus_Holder"
            self.pyclass = Holder

    class getWorkflowTokenStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkflowTokenStatusResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getWorkflowTokenStatusResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"getWorkflowTokenStatusReturn"), aname="_getWorkflowTokenStatusReturn", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getWorkflowTokenStatusResponse')
            kw["aname"] = "_getWorkflowTokenStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getWorkflowTokenStatusReturn = []
                    return
            Holder.__name__ = "getWorkflowTokenStatusResponse_Holder"
            self.pyclass = Holder

    class answerWorkflowInput_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "answerWorkflowInput"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.answerWorkflowInput_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"workflowTokenId"), aname="_workflowTokenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservice.vso.dunes.ch","WorkflowTokenAttribute",lazy=False)(pname=(ns,"answerInputs"), aname="_answerInputs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'answerWorkflowInput')
            kw["aname"] = "_answerWorkflowInput"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._workflowTokenId = None
                    self._answerInputs = []
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "answerWorkflowInput_Holder"
            self.pyclass = Holder

    class answerWorkflowInputResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "answerWorkflowInputResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.answerWorkflowInputResponse_Dec.schema
            TClist = []
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'answerWorkflowInputResponse')
            kw["aname"] = "_answerWorkflowInputResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "answerWorkflowInputResponse_Holder"
            self.pyclass = Holder

    class hasRights_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "hasRights"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.hasRights_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"taskId"), aname="_taskId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"right"), aname="_right", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'hasRights')
            kw["aname"] = "_hasRights"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._taskId = None
                    self._username = None
                    self._password = None
                    self._right = None
                    return
            Holder.__name__ = "hasRights_Holder"
            self.pyclass = Holder

    class hasRightsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "hasRightsResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.hasRightsResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"hasRightsReturn"), aname="_hasRightsReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'hasRightsResponse')
            kw["aname"] = "_hasRightsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hasRightsReturn = None
                    return
            Holder.__name__ = "hasRightsResponse_Holder"
            self.pyclass = Holder

    class getAllPlugin_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllPlugin"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getAllPlugin_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"in0"), aname="_in0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"in1"), aname="_in1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getAllPlugin')
            kw["aname"] = "_getAllPlugin"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._in0 = None
                    self._in1 = None
                    return
            Holder.__name__ = "getAllPlugin_Holder"
            self.pyclass = Holder

    class getAllPluginResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllPluginResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getAllPluginResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","ModuleInfo",lazy=False)(pname=(ns,"getAllPluginReturn"), aname="_getAllPluginReturn", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getAllPluginResponse')
            kw["aname"] = "_getAllPluginResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getAllPluginReturn = []
                    return
            Holder.__name__ = "getAllPluginResponse_Holder"
            self.pyclass = Holder

    class getAllPlugins_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllPlugins"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getAllPlugins_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getAllPlugins')
            kw["aname"] = "_getAllPlugins"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "getAllPlugins_Holder"
            self.pyclass = Holder

    class getAllPluginsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllPluginsResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.getAllPluginsResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","ModuleInfo",lazy=False)(pname=(ns,"getAllPluginsReturn"), aname="_getAllPluginsReturn", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'getAllPluginsResponse')
            kw["aname"] = "_getAllPluginsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getAllPluginsReturn = []
                    return
            Holder.__name__ = "getAllPluginsResponse_Holder"
            self.pyclass = Holder

    class findForId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findForId"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.findForId_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'findForId')
            kw["aname"] = "_findForId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._id = None
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "findForId_Holder"
            self.pyclass = Holder

    class findForIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findForIdResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.findForIdResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","FinderResult",lazy=False)(pname=(ns,"findForIdReturn"), aname="_findForIdReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'findForIdResponse')
            kw["aname"] = "_findForIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._findForIdReturn = None
                    return
            Holder.__name__ = "findForIdResponse_Holder"
            self.pyclass = Holder

    class findRelation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findRelation"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.findRelation_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"parentType"), aname="_parentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"parentId"), aname="_parentId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relationName"), aname="_relationName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'findRelation')
            kw["aname"] = "_findRelation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._parentType = None
                    self._parentId = None
                    self._relationName = None
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "findRelation_Holder"
            self.pyclass = Holder

    class findRelationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findRelationResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.findRelationResponse_Dec.schema
            TClist = [GTD("http://webservice.vso.dunes.ch","FinderResult",lazy=False)(pname=(ns,"findRelationReturn"), aname="_findRelationReturn", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'findRelationResponse')
            kw["aname"] = "_findRelationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._findRelationReturn = []
                    return
            Holder.__name__ = "findRelationResponse_Holder"
            self.pyclass = Holder

    class hasChildrenInRelation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "hasChildrenInRelation"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.hasChildrenInRelation_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"parentType"), aname="_parentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"parentId"), aname="_parentId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relationName"), aname="_relationName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'hasChildrenInRelation')
            kw["aname"] = "_hasChildrenInRelation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._parentType = None
                    self._parentId = None
                    self._relationName = None
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "hasChildrenInRelation_Holder"
            self.pyclass = Holder

    class hasChildrenInRelationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "hasChildrenInRelationResponse"
        schema = "http://webservice.vso.dunes.ch"
        def __init__(self, **kw):
            ns = ns0.hasChildrenInRelationResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"hasChildrenInRelationReturn"), aname="_hasChildrenInRelationReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://webservice.vso.dunes.ch', u'hasChildrenInRelationResponse')
            kw["aname"] = "_hasChildrenInRelationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hasChildrenInRelationReturn = None
                    return
            Holder.__name__ = "hasChildrenInRelationResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://webservice.vso.dunes.ch)
