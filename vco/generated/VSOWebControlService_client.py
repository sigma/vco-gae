##################################################
# file: VSOWebControlService_client.py
# 
# client stubs generated by "vmw.ZSI.generate.wsdl2python.WriteServiceModule"
#     /home/yann/.virtualenvs/gae/bin/wsdl2py ../../wsdl/vmo.wsdl
# 
##################################################

from VSOWebControlService_types import *
import urlparse, types
from vmw.ZSI.TCcompound import ComplexType, Struct
from vmw.ZSI import client
from vmw.ZSI.schema import GED, GTD
import vmw.ZSI

# Locator
class VSOWebControlServiceLocator:
    webservice_address = "http://vco-gae.appspot.com/vmware-vmo-webcontrol/webservice"
    def getwebserviceAddress(self):
        return VSOWebControlServiceLocator.webservice_address
    def getwebservice(self, url=None, **kw):
        return WebServiceSOAP(url or VSOWebControlServiceLocator.webservice_address, **kw)

# Methods
class WebServiceSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: find
    def find(self, request, **kw):
        if isinstance(request, findRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(findResponse.typecode)
        return response

    # op: echo
    def echo(self, request, **kw):
        if isinstance(request, echoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(echoResponse.typecode)
        return response

    # op: echoWorkflow
    def echoWorkflow(self, request, **kw):
        if isinstance(request, echoWorkflowRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(echoWorkflowResponse.typecode)
        return response

    # op: sendCustomEvent
    def sendCustomEvent(self, request, **kw):
        if isinstance(request, sendCustomEventRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(sendCustomEventResponse.typecode)
        return response

    # op: getWorkflowForId
    def getWorkflowForId(self, request, **kw):
        if isinstance(request, getWorkflowForIdRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getWorkflowForIdResponse.typecode)
        return response

    # op: getAllWorkflows
    def getAllWorkflows(self, request, **kw):
        if isinstance(request, getAllWorkflowsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getAllWorkflowsResponse.typecode)
        return response

    # op: getWorkflowsWithName
    def getWorkflowsWithName(self, request, **kw):
        if isinstance(request, getWorkflowsWithNameRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getWorkflowsWithNameResponse.typecode)
        return response

    # op: executeWorkflow
    def executeWorkflow(self, request, **kw):
        if isinstance(request, executeWorkflowRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(executeWorkflowResponse.typecode)
        return response

    # op: simpleExecuteWorkflow
    def simpleExecuteWorkflow(self, request, **kw):
        if isinstance(request, simpleExecuteWorkflowRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(simpleExecuteWorkflowResponse.typecode)
        return response

    # op: cancelWorkflow
    def cancelWorkflow(self, request, **kw):
        if isinstance(request, cancelWorkflowRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(cancelWorkflowResponse.typecode)
        return response

    # op: getWorkflowTokenResult
    def getWorkflowTokenResult(self, request, **kw):
        if isinstance(request, getWorkflowTokenResultRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getWorkflowTokenResultResponse.typecode)
        return response

    # op: getWorkflowTokenForId
    def getWorkflowTokenForId(self, request, **kw):
        if isinstance(request, getWorkflowTokenForIdRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getWorkflowTokenForIdResponse.typecode)
        return response

    # op: getWorkflowTokenStatus
    def getWorkflowTokenStatus(self, request, **kw):
        if isinstance(request, getWorkflowTokenStatusRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getWorkflowTokenStatusResponse.typecode)
        return response

    # op: answerWorkflowInput
    def answerWorkflowInput(self, request, **kw):
        if isinstance(request, answerWorkflowInputRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(answerWorkflowInputResponse.typecode)
        return response

    # op: hasRights
    def hasRights(self, request, **kw):
        if isinstance(request, hasRightsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(hasRightsResponse.typecode)
        return response

    # op: getAllPlugin
    def getAllPlugin(self, request, **kw):
        if isinstance(request, getAllPluginRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getAllPluginResponse.typecode)
        return response

    # op: getAllPlugins
    def getAllPlugins(self, request, **kw):
        if isinstance(request, getAllPluginsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getAllPluginsResponse.typecode)
        return response

    # op: findForId
    def findForId(self, request, **kw):
        if isinstance(request, findForIdRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(findForIdResponse.typecode)
        return response

    # op: findRelation
    def findRelation(self, request, **kw):
        if isinstance(request, findRelationRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(findRelationResponse.typecode)
        return response

    # op: hasChildrenInRelation
    def hasChildrenInRelation(self, request, **kw):
        if isinstance(request, hasChildrenInRelationRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(hasChildrenInRelationResponse.typecode)
        return response

findRequest = GED("http://webservice.vso.dunes.ch", "find").pyclass

findResponse = GED("http://webservice.vso.dunes.ch", "findResponse").pyclass

echoRequest = GED("http://webservice.vso.dunes.ch", "echo").pyclass

echoResponse = GED("http://webservice.vso.dunes.ch", "echoResponse").pyclass

echoWorkflowRequest = GED("http://webservice.vso.dunes.ch", "echoWorkflow").pyclass

echoWorkflowResponse = GED("http://webservice.vso.dunes.ch", "echoWorkflowResponse").pyclass

sendCustomEventRequest = GED("http://webservice.vso.dunes.ch", "sendCustomEvent").pyclass

sendCustomEventResponse = GED("http://webservice.vso.dunes.ch", "sendCustomEventResponse").pyclass

getWorkflowForIdRequest = GED("http://webservice.vso.dunes.ch", "getWorkflowForId").pyclass

getWorkflowForIdResponse = GED("http://webservice.vso.dunes.ch", "getWorkflowForIdResponse").pyclass

getAllWorkflowsRequest = GED("http://webservice.vso.dunes.ch", "getAllWorkflows").pyclass

getAllWorkflowsResponse = GED("http://webservice.vso.dunes.ch", "getAllWorkflowsResponse").pyclass

getWorkflowsWithNameRequest = GED("http://webservice.vso.dunes.ch", "getWorkflowsWithName").pyclass

getWorkflowsWithNameResponse = GED("http://webservice.vso.dunes.ch", "getWorkflowsWithNameResponse").pyclass

executeWorkflowRequest = GED("http://webservice.vso.dunes.ch", "executeWorkflow").pyclass

executeWorkflowResponse = GED("http://webservice.vso.dunes.ch", "executeWorkflowResponse").pyclass

simpleExecuteWorkflowRequest = GED("http://webservice.vso.dunes.ch", "simpleExecuteWorkflow").pyclass

simpleExecuteWorkflowResponse = GED("http://webservice.vso.dunes.ch", "simpleExecuteWorkflowResponse").pyclass

cancelWorkflowRequest = GED("http://webservice.vso.dunes.ch", "cancelWorkflow").pyclass

cancelWorkflowResponse = GED("http://webservice.vso.dunes.ch", "cancelWorkflowResponse").pyclass

getWorkflowTokenResultRequest = GED("http://webservice.vso.dunes.ch", "getWorkflowTokenResult").pyclass

getWorkflowTokenResultResponse = GED("http://webservice.vso.dunes.ch", "getWorkflowTokenResultResponse").pyclass

getWorkflowTokenForIdRequest = GED("http://webservice.vso.dunes.ch", "getWorkflowTokenForId").pyclass

getWorkflowTokenForIdResponse = GED("http://webservice.vso.dunes.ch", "getWorkflowTokenForIdResponse").pyclass

getWorkflowTokenStatusRequest = GED("http://webservice.vso.dunes.ch", "getWorkflowTokenStatus").pyclass

getWorkflowTokenStatusResponse = GED("http://webservice.vso.dunes.ch", "getWorkflowTokenStatusResponse").pyclass

answerWorkflowInputRequest = GED("http://webservice.vso.dunes.ch", "answerWorkflowInput").pyclass

answerWorkflowInputResponse = GED("http://webservice.vso.dunes.ch", "answerWorkflowInputResponse").pyclass

hasRightsRequest = GED("http://webservice.vso.dunes.ch", "hasRights").pyclass

hasRightsResponse = GED("http://webservice.vso.dunes.ch", "hasRightsResponse").pyclass

getAllPluginRequest = GED("http://webservice.vso.dunes.ch", "getAllPlugin").pyclass

getAllPluginResponse = GED("http://webservice.vso.dunes.ch", "getAllPluginResponse").pyclass

getAllPluginsRequest = GED("http://webservice.vso.dunes.ch", "getAllPlugins").pyclass

getAllPluginsResponse = GED("http://webservice.vso.dunes.ch", "getAllPluginsResponse").pyclass

findForIdRequest = GED("http://webservice.vso.dunes.ch", "findForId").pyclass

findForIdResponse = GED("http://webservice.vso.dunes.ch", "findForIdResponse").pyclass

findRelationRequest = GED("http://webservice.vso.dunes.ch", "findRelation").pyclass

findRelationResponse = GED("http://webservice.vso.dunes.ch", "findRelationResponse").pyclass

hasChildrenInRelationRequest = GED("http://webservice.vso.dunes.ch", "hasChildrenInRelation").pyclass

hasChildrenInRelationResponse = GED("http://webservice.vso.dunes.ch", "hasChildrenInRelationResponse").pyclass
